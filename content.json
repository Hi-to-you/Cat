{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"Hi-to-you","url":"http://yoursite.com"},"pages":[{"title":"[404]","date":"2018-10-20T02:45:15.567Z","updated":"2018-10-20T02:45:15.534Z","comments":true,"path":"404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":""},{"title":"about me","date":"2018-10-20T01:24:21.000Z","updated":"2018-10-20T02:28:19.798Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"人真正的魅力 不是你给对方留下多么美好的印象 而是对方认识你多年以后仍喜欢和你在一起 更不是初次见面之后有种相见恨晚的感觉 而是历经沧桑以后依然能由衷的说一句 认识你真好"}],"posts":[{"title":"Security service","slug":"Security service","date":"2018-11-29T08:12:34.485Z","updated":"2018-11-30T06:17:14.011Z","comments":true,"path":"2018/11/29/Security service/","link":"","permalink":"http://yoursite.com/2018/11/29/Security service/","excerpt":"","text":"数据加密数据加密模型 数据加密概念数据加密是指将一个信息（明文）经过加密密钥及加密函数转换为没有意义的另一个信息（密文）的过程。该过程的逆过程称为加密。 明文：加密前的原始信息； 密文：明文被加密后的信息； 密钥：控制加密算法和解密算法得以实现的关键信息，分为加密密钥和解密密钥； 加密：将明文通过数学算法转换成密文的过程； 解密：将密文还原成明文的过程。 密码技术是解决信息安全最有效的手段，是解决信息安全的核心技术。数据加密的基本思想是通过变换信息的表示形式来伪装需要保护的敏感信息，使非授权者不能了解被保护信息的内容。使用密码技术的目的是为了保护信息的保密性、完整性和真实性。 数据加密原理对称密钥加密（保密密钥法）对称密码是一种传统的密码体制，也称私钥密码体制，对称密码算法可分为两类： 序列算法：对明文中的单个位（或字节）运算的算法。例：凯撒密码。 分组算法：把明文信息分割成块结构，逐块予以加密和解密。例：DES。 非对称密钥加密（公开密钥法）特点：① 加密和解密使用两个不同的密钥② 加密和解密不可推导③ 算法复杂，效率低④ 适用于开放网络中⑤ 可用于数字签名 加密：C=E(M,Ke) 解密：M=D(C,Kd) 可逆：D(E(M,Ke),Kd)=M 单向散列算法（哈希算法）哈希算法将任意长度的二进制映射为较短的固定长度的二进制值，这个小的二进制值称为哈希值。哈希值是一段数据唯一且极其紧凑的数值形式表示，可提供完整性的判断依据。哈希（Hash）算法，即散列函数。它是一种单向密码体制，即它是一个从明文到密文的不可逆的映射，只有加密过程，没有解密过程。散列（抗碰撞）：不存在非常困难碰撞现象“报文不同，hash值相同”。 M1≠M2，则Hash(M1)≠Hash(M2) Hash(M1)＝Hash(M2)，则M1＝M2 数据完整性数据完整性定义数据完整性是防止非法实体对交换数据的修改、插入、替换和删除，或者如果被修改、插入、替换和删除时可以被检测出来。数据完整性可以通过消息认证模式来保证。 基本思路(1)发送方根据要发送的原信息M0，利用验证码函数产生与M0密切相关的信息验证码C0； (2)发送方把原始信息M0和信息验证码C0合在一起，并通过网络发送给接收方； (3)接受方对所收到的原信息和验证码进行分离，假设分别为M1和C1，因为这两个信息可能已被篡改； (4)接收方使用原始信息相同的信息验证码函数（双方事先约定好的）对收到的信息部分M1计算其自己的信息验证码C2； (5)接收方将自己制作的接收方信息验证码同分离出来的信息验证码C1进行对比，如果相等，接收方断定收到的信息M1与用户发送的信息M0是相同的，如果不相等，则接收方知道原始信息已经被篡改。 数据完整性模型 数据完整性机制完整性验证中加密的安全数据完整性的一些机制需要对其中的内容进行加密，例如摘要。 数据完整性验证的信息有效率数据完整性验证的信息有效率是指原信息部分长度与合并后信息（包括原信息和验证码）的长度之比。 完整性验证算法的性能数据完整性验证包括发送方计算验证码，进行加密，接收方重新计算验证码，进行解密，比较等。 完整性验证算法的性能数据完整性验证包括发送方计算验证码，进行加密，接收方重新计算验证码，进行解密，比较等。 基于数据校验思想的数据完整性验证机制 总结：能检测出数据发生错误的机制并不一定能对数据完整性检测有效。解决方法：对发送的数据进行加密。 基于错误检测码与对称密钥加密的完整性验证机制总结：这个机制防止了攻击者同时把原信息和错误检测码替换并且保持它们之间的正确匹配关系的攻击，因为密钥只有双方知道，攻击者同时替换后没办法用双方的密钥K再重新加密。这个机制的前提是需要双方共享对称密钥K，存在密钥的发布问题和缺点。如果改为非对称加密体制的速度又太慢，因此要将二者结合。 基于非对称密钥和对称密钥结合的完整性验证机制总结： 优点是双方不需要共享密钥； 接收者确信信息未被更改过； 信息的有效率高。 防止抵赖防止抵赖的意义数据完整性保证发送方和接收方的网络传送数据不被第三方篡改和替换，但不能保证双方自身的欺骗和抵赖。在双方自身的欺骗中，双方的不可抵赖性是网络安全的一个重要安全特性。旨在生成、收集、维护有关己声明的事件或动作的证据，并使该证据可得并且确认该证据。 防止抵赖的基本思路通过用户自己独有的、唯一的特征（如私钥）对信息进行标记或者通过可信第三方进行公正处理来防止双方的抵赖行为。抗抵赖机制的实现可以通过数字签名来保证。一个完整的抗抵赖机制包括两个部分：一个是签名部分，另一个是验证部分，签名部分的密钥只有签名人掌握，这也是抗抵赖性的前提和假设；验证部分的密钥应当公开，以便于他人验证。 不可抵赖机制 抗抵赖性机制的信息有效率 抗抵赖性机制是否具有双向抵赖功能 抗抵赖性机制是否同时具有保密，完整性验证作用 抗抵赖性机制的性能 数字签名数字签名的意义签名是证明当事人（个人或组织）认可相关信息的证据，防止当事人事后否认。 数字签名的特性① 真实性 身份真实，其他任何人不能伪造签名（唯一性）； 被签的信息真实（纸将信息与签名绑定）； ② 防止抵赖：签名者事后不能抵赖。 身份认证身份认证的含义 是证实某实体（人、主机）是否合法有效的一个过程。 认证涉及声称者与验证者，声称者提供证据（参数），验证者验证证据。 身份认证的参数 于你所知道的：知识、口令、密码等 基于你所拥有的：身份证、信用卡、钥匙、智能卡、令牌等 基于你的个人特征：指纹、笔迹、声音、虹膜等 双因素、多因素认证：综合上述两种或多种因素进行认证 明文方式 认证系统数据库中明文存储口令 输入终端和认证系统之间传输明文账户与口令 认证案例：FTP、Telnet、PAP认证 加密方式 认证系统数据库存储口令（Hash） 输入终端和认证系统之间传输加密口令（Hash） 认证案例：操作系统、数据库、Chap认证 质询方式 加密：口令存储传输采用摘要 动态：每次会话质询不同（随机），动态响应，防止重放攻击 口令认证安全策略 暴力破解 避免弱口令（增加长度、复杂度） 防猜测/暴力破解/字典攻击 防盗号木马（软键盘） 口令认证应用 认证令牌 双因素认证：认证令牌（拥有令牌）和开启令牌的PIN（知道某事） 用户认证令牌与认证系统数据库保存相同中子数 质询/响应方式常用的为两种（基于时间戳，基于随机数） 对称密码认证基础 质询/响应方式 认证的基础为双方共享密钥Ks（加密/解密） 对称密码认证模型 基于KDC产生分配会话密钥Ks 一次（会话）一密 公钥密码认证基础 质询/响应方式 认证的基础为被认证方的私钥（签名/验证） 访问控制访问控制的意义访问控制就是在身份认证的基础上，通过对访问的申请、批准和撤销的全过程进行有效控制，从而确保只有合法用户的合法访问给予批准，而且相应的访问只能执行授权的操作。 访问控制的三要素 主体：主动的实体，可以访问客体。 客体：是一个被动的实体，对客体的访问要受控。 控制策略：主体对客体的访问规则集，规定主体对客体作用行为和客体对 主体的条件约束，控制策略体现为一种授权行为。 访问控制的两个重要过程 通过“鉴别”来检验主体的合法身份（身份认证） 通过“授权”来限制主体对客体的访问权限 访问控制关系模型 自主访问控制（DAC或基于身份的访问控制）客体的所有者按照自己的安全策略授予系统中的其他用户对客体的访问权。优点：灵活度高，被大量采用。缺点：安全性低。信息在移动过程中其访问权限关系会被改变。 强制访问控制（MAC或基于规则的访问控制）系统根据主体和客体的安全属性，以强制的方式控制主体和的访问。系统中资源划分为不同的安全等级和类别（绝密级、机密级、秘密级、无密级）特点：取决于能用算法表达的并能在计算机上执行的策略。策略给出资源受到的限制和实体的授权，对资源的访问取决于实体的授权而非实体的身份。缺点：缺乏灵活性。 强制访问控制实现机制(1)将主体和客体分级，根据主体和客体的级别标记来决定访问模式(2)其访问控制关系分为：上读/下写（完整性）、下读/上写（机密性）(3)通过安全标签实现单向信息流通模式 基于角色的访问控制（RBAC）RBAC产生背景 当用户数量增加时，系统管理变得复杂，工作量急剧增加。 当用户权限发生变更时，需进行大量繁琐的授权变动。 RBAC模型的基本思想 角色数量不多，权限稳定不变。 只有系统管理员有权定义和分配角色。 RBAC安全机制 角色基数限制 角色互斥 角色激活（多角色） RBAC特点 采用角色基数限制最大授权用户数，采用角色互斥实现职责分离安全原则，采用活跃角色集实现最小特权安全原则。 与企业分层管理结构一致 角色/权限之间的变化比角色/用户之间的变化相对要慢得多（区别于组）。","categories":[{"name":"数据加密","slug":"数据加密","permalink":"http://yoursite.com/categories/数据加密/"}],"tags":[{"name":"REV","slug":"REV","permalink":"http://yoursite.com/tags/REV/"}]},{"title":"Cryptography","slug":"Cryptography","date":"2018-10-19T02:37:10.935Z","updated":"2018-11-30T06:21:00.285Z","comments":true,"path":"2018/10/19/Cryptography/","link":"","permalink":"http://yoursite.com/2018/10/19/Cryptography/","excerpt":"","text":"关于解密的在线网站我们经常在做CTF题目中，会遇到各种各样的密文，所以今天推荐一些在线解密网站. xssee:http://web2hack.org/xssee 在线编码解码(多种并排):http://bianma.911cha.com 在线加密解密(多种):http://encode.chahuo.com 凯撒密码:http://planetcalc.com/1434/ ROT5/13/18/47编码转换:http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php Base32:https://tools.deamwork.com/crypt/decrypt/base32decode.html 古典密码自动化爆破(词频分析):http://quipqiup.com/index.php ‘+.&lt;&gt;[]’ &amp;&amp; ‘!.?’(Brainfuck/Ook!):https://www.splitbrain.org/services/ook ‘+-.&lt;&gt;[]’(Brainfuck):https://www.nayuki.io/page/brainfuck-interpreter-javascript ‘()[]!+’JavaScript编码(JSfuck):http://discogscounter.getfreehosting.co.uk/jsnoalnum.php 摩斯密码翻译器:http://www.jb51.net/tools/morse.htm Morse Code摩尔斯电码:http://rumkin.com/tools/cipher/morse.php 摩尔斯电码转换器:http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx Cisco Type 7 Reverser:http://packetlife.net/toolbox/type7 Cisco:http://www.ifm.net.nz/cookbooks/passwordcracker.html cmd5解密 &amp;&amp; NTLM &amp;&amp; mysql:http://www.cmd5.com JScript/VBscript脚本解密(#@~^..^#~@):http://www.dheart.net/decode/index.php VBScript.Encode解密(tip:Asp encode):http://adophper.com/encode.html JScript.Encode脚本加密与解密:http://www.haokuwang.com/jsendecode.htm uuencode解码 &amp;&amp; xxencode解码(古老的邮件密码):http://web.chacuo.net/charsetuuencode MIME标准(邮件编码的一种):http://dogmamix.com/MimeHeadersDecoder/ Binhex编码(邮件编码的一种):http://encoders-decoders.online-domain-tools.com/ 猪圈密码:http://www.simonsingh.net/The_Black_Chamber/pigpen.html aaencode(JS代码转换成网络表情，就是颜文字js加密):http://utf-8.jp/public/aaencode.html Manchester曼彻斯特解密：http://eleif.net/manchester.html Vigenère维多利亚解密：https://www.guballa.de/vigenere-solver Hill cipher(希尔密码):http://planetcalc.com/3327/ html隐写:http://fog.misty.com/perry/ccs/snow/snow/snow.html Serpent加密解密:http://serpent.online-domain-tools.com/ 十六进制Hex转文本字符串:http://www.bejson.com/convert/ox2str/ Hex2text:http://www.convertstring.com/EncodeDecode/HexDecode 文本加密为汉字(“盲文”，音符，各种语言):http://www.qqxiuzi.cn/bianma/wenbenjiami.php 二维码/条形码:https://online-barcode-reader.inliteresearch.com/ 在线二维码解密:http://jiema.wwei.cn/ 在线分解GIF帧图:http://tu.sioe.cn/gj/fenjie/ 计算文件Hash值:http://www.atool.org/file_hash.php","categories":[{"name":"cryptography","slug":"cryptography","permalink":"http://yoursite.com/categories/cryptography/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://yoursite.com/tags/CTF/"}]},{"title":"Bugku WriteUp","slug":"bugku","date":"2018-10-18T00:29:47.532Z","updated":"2018-11-29T07:49:18.639Z","comments":true,"path":"2018/10/18/bugku/","link":"","permalink":"http://yoursite.com/2018/10/18/bugku/","excerpt":"","text":"矛盾 判断输入的num 如果不是数字的话且为1的话输出flag 但是我们有很多方法让num为1但是不是数字 使用is_numeric遇到%00截断的漏洞,进行构造http://120.24.86.145:8002/get/index1.php?num=1%00get请求爆出flag web3直接查看原码 将下面那一行字符串进行HTML解码 这题难度可能较低，主要是明白这个是什么码，题目做的多的大佬可能一眼就能看出来解法了。 本地包含$_REQUEST对get，post都能接受include“flag.php”说明该文件还存在本地获得hello的值，由于hello为’hello’，所以无论在URL中对hello赋于任何值，都会全盘接受,其中var_dump（）是将a打印到界面中,在根据eval函数的特性(计算后面括号中的表达式)。尝试将flag.php文件直接输出 http://120.24.86.145:8003/?hello=1);print_r(file(&quot;./flag.php&quot;));%23使其原语句为： eval(“var_dump(1);print_r(file(“./flag.php”))”)或者 直接对hello赋值，使hello=file_get_contents(&#39;flag.php&#39;)再查看原码通过构造URL，flag立马爆出来了。 flag在index里这里要注意的是file的关键字，看看php://filter能否将index读出来http://120.24.86.145:8005/post/index.php?file=php://filter/read/convert.base64-encode/resource=index.php从这张页面中，我们会得到一段base64代码将这段base64代码解码得到flag 网站被黑打开网页，首先我们先在URL后面加上一个index.php来判断它是否是PHP网页页面提示说网站存在漏洞，所以我们将御剑开起来扫描扫描后台这时我们发现一个shell.php文件，打开连接是一个webshell，尝试用弱口令登录发现弱口令登录无效，我们使用burp自带字典进行暴力破解得出的密码为hack，将密码输入得到flag 过狗一句话 s=print_r(scandir(&#39;./&#39;)),然后读取flag.txt s=print_r(glob(&quot;*.*&quot;)),然后读取show_source(flag.txt) 使用file_get_contents(flag.txt)读取文件 还有system(&#39;ls&#39;)的读取方法但是这里应该没有权限我们在页面上会发现一个f94lg.txt文件，读取它的内容 眼见非实打开软件，发现是以504B0304开头，说明是zip文件将文件名后缀名更改为zip，将其解压把里面的文件打开看 又一张图片，还单纯嘛？题目给出一张图片。我们把它放到kali里，用binwalk分析一下发现图片里还包含着一张图片，我们用foremost分离出来将图片分离出来，flag就直接在图片上 闪的好快题目给我们一张gif图片，打开之后发现在真的像题目描述一样，闪的巨快这个时候我们可以考虑把它分帧，通过在线分帧的方式我们得到十六张二维码的图片当然我们也可以通过工具来解这题这里我们使用StegSolve，然后Analysis-&gt;Frame Browser通过在线解二维码，得到flagflag:SYC{F1aSh_so_f4sT} 隐写2把图片下载到桌面，没什么头绪，直接扔进winhex看看看到了很多00填充数据，怀疑是捆绑了文件在里面将图片后缀名改为zip并解压里面捆绑着一个压缩包和一张图片，图片的内容提示的就是这个压缩包的密码这个肯定是要我们猜解密码，太费事了，我们直接选择暴力破解因为我这个是zip破解软件，所以我把后缀名改为了zip进行破解提示说是三位数，所以我们把长度改为3这样我们就把flag.rar的密码给爆破出来啦解压之后又是一张图片，令人猝不及防,这个直接用记事本打开就好按照以前的套路，关键信息往往藏在最后面，在最后面发现一串类密文的字符串f1@g{eTB1IEFyZSBhIGhAY2tlciE=}我们把里面的密文进行base64解密flag:flag{y0u Are a h@cker!} 宽带信息泄露首先我们下载下来的附件是bin为后缀的配置文件，我们尝试用文本软件打开打开我们发现是一堆乱码，猜测是配置文件被加密了，我们使用RouterPassView来打开因为题目提示flag是用户名，我们可以搜索username试试flag:flag{053700357621} 管理员系统首先日常查看原码，初步看是没什么问题的，但是页面最后发现了一串base64 不得不说这真是太套路了，很难注意到这个，解密为test123，猜测为admin密码根据提示我们知道需要伪造本地IP才可以访问,这个时候就想到X-Forwarded-For简称XFF头，代表客户端，也就是HTTP的请求端真实的IP伪造一个XFF头,伪装成本地登录X-Forwarded-For: 127.0.0.1抓包并将语句加入进去The flag is: 85ff2ee4171396724bae20c0bd851f6b 程序员网站提示了我们要从本地访问，跟上个题目一样需要用到X-Forwarded-For来伪造成本地IPflag{loc-al-h-o-st1} 啊哒下载发现是一张表情包，惯例我们查看下它的属性 上面我们发现一串数字和字母，我们用十六进制转字符串这一串字符我们现在还不知道是什么，先放在这通过winhex我们发现图片存在捆绑文件，将它后缀改为zip进行解压解压过程中，提示我们输入密码，这个时候我们将刚才的字符串输入进去得到一个flag.txt文件flag{3XiF_iNf0rM@ti0n}","categories":[{"name":"CTF","slug":"CTF","permalink":"http://yoursite.com/categories/CTF/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://yoursite.com/tags/ctf/"}]}]}